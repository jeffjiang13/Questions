# def knapsack(items, capacity):
# # Create a table of zeros with dimensions (len(items)+1) x (capacity+1)
#     table = [[0 for _ in range(capacity + 1)] for _ in range(len(items) + 1)]


#     # Iterate over the items and the knapsack capacities
#     for i, (value, weight) in enumerate(items):
#         for j in range(capacity + 1):
#             # If the current item is too heavy to fit in the knapsack,
#             # skip it and move on to the next item
#             if weight > j:
#                 continue
#             # Otherwise, choose the maximum value between the current item
#             # and the previous item
#             table[i + 1][j] = max(table[i][j], table[i][j - weight] + value)

# # Return the maximum value in the last row of the table
#     return table[-1][-1]
# if __name__ == "__main__":
# # Define the items and their corresponding weights and values
#     items = [
#     (50, 4), # Admiral
#     (10, 1), # Corgi
#     (25, 2), # Denzel
#     (27, 3), # Royal
#     (38, 5), # Yankee
#     ]

# # Set the capacity of the knapsack to 100m of ribbon
# capacity = 100

# # Solve the knapsack problem and print the result
# result = knapsack(items, capacity)
# print(result)


# def max_ribbon_profit(ribbon_length, bow_prices):
#     # Initialize an array to store the maximum profit for each length of ribbon
#     max_profits = [0] * (ribbon_length + 1)


#     # Loop through each length of ribbon
#     for i in range(1, ribbon_length + 1):
#         # Initialize the maximum profit for the current length to 0
#         max_profit = 0

#         # Loop through each bow
#         for bow_length, bow_price in bow_prices:
#             # If the current bow length is less than or equal to the current ribbon length,
#             # update the maximum profit for the current length of ribbon
#             if bow_length <= i:
#                 max_profit = max(max_profit, bow_price + max_profits[i - bow_length])

#         # Store the maximum profit for the current length of ribbon
#         max_profits[i] = max_profit

# # Return the maximum profit for the given length of ribbon
#     return max_profits[ribbon_length]
# if __name__ == "__main__":
#     # The lengths and prices of the bows
#     bow_prices = [(4, 50), (1, 10), (2, 25), (3, 27), (5, 38)]
#     # The length of the ribbon
#     ribbon_length = 100
#     # Get the maximum profit from the given length of ribbon
#     result = max_ribbon_profit(ribbon_length, bow_prices)
#     print(result)


# def code_already_written(ribbon_length, prices):
# # Initialize the maximum value that can be achieved
#     max_value = 0


#     # Create a list to store the maximum value that can be achieved for each length of ribbon
#     values = [0] * (ribbon_length + 1)

#     # Loop through each length of ribbon
#     for i in range(1, ribbon_length + 1):
#         # Loop through each bow
#         for bow, length, price in prices:
#             # If the length of the bow is less than or equal to the current length of ribbon
#             if length <= i:
#                 # Update the maximum value that can be achieved for the current length of ribbon
#                 values[i] = max(values[i], values[i - length] + price)

#     # Return the maximum value that can be achieved for the given length of ribbon
#     return values[ribbon_length]
# if __name__ == "__main__":
# # Define the values from the problem
#     ribbon_length = 100
#     prices = [("Admiral", 4, 50), ("Corgi", 1, 10), ("Denzel", 2, 25), ("Royal", 3, 27), ("Yankee", 5, 38)]


#     # Calculate the maximum amount of money that can be made from 100m of ribbon
#     result = code_already_written(ribbon_length, prices)
#     print(result)


# def code_already_written(ribbon_length, bows):
#     # Create a two-dimensional array to store the maximum profit for each length of ribbon
#     # and each possible bow
#     dp = [[0 for _ in range(ribbon_length + 1)] for _ in range(len(bows) + 1)]

#     # Iterate over the possible lengths of ribbon and the available bows
#     for i in range(1, len(bows) + 1):
#         for j in range(1, ribbon_length + 1):
#             # If the current bow can fit in the current length of ribbon
#             if j >= bows[i-1]["length"]:
#                 # Calculate the maximum profit by selecting the current bow or not selecting it
#                 dp[i][j] = max(dp[i-1][j], dp[i-1][j-bows[i-1]["length"]] + bows[i-1]["price"])
#             else:
#                 # If the current bow doesn't fit, the maximum profit is the same as the previous row
#                 dp[i][j] = dp[i-1][j]

#     # Return the maximum profit for the given length of ribbon
#     return dp[len(bows)][ribbon_length]
# if __name__ == "__main__":
# # Define the bows and their corresponding lengths and prices
#     bows = [
#     {"name": "Admiral", "length": 4, "price": 50},
#     {"name": "Corgi", "length": 1, "price": 10},
#     {"name": "Denzel", "length": 2, "price": 25},
#     {"name": "Royal", "length": 3, "price": 27},
#     {"name": "Yankee", "length": 5, "price": 38}
#     ]


# # Set the length of the ribbon
# ribbon_length = 100

# # Calculate the maximum profit for the given length of ribbon and bows
# result = code_already_written(ribbon_length, bows)
# print(result)

# def code_already_written(param1, param2):
#     # Create a two-dimensional array to store the maximum profit for each length of ribbon
#     # and each possible bow
#     dp = [[0 for _ in range(param1 + 1)] for _ in range(len(param2) + 1)]

#     # Iterate over the possible lengths of ribbon and the available bows
#     for i in range(1, len(param2) + 1):
#         for j in range(1, param1 + 1):
#             # If the current bow can fit in the current length of ribbon
#             if j >= param2[i-1]["length"]:
#                 # Calculate the maximum profit by selecting the current bow or not selecting it
#                 dp[i][j] = max(dp[i-1][j], dp[i-1][j-param2[i-1]["length"]] + param2[i-1]["price"])
#             else:
#                 # If the current bow doesn't fit, the maximum profit is the same as the previous row
#                 dp[i][j] = dp[i-1][j]

#     # Return the maximum profit for the given length of ribbon
#     return dp[len(param2)][param1]
# if __name__ == "__main__":
# # Define the bows and their corresponding lengths and prices
#     bows = [
#     {"name": "Admiral", "length": 4, "price": 50},
#     {"name": "Corgi", "length": 1, "price": 10},
#     {"name": "Denzel", "length": 2, "price": 25},
#     {"name": "Royal", "length": 3, "price": 27},
#     {"name": "Yankee", "length": 5, "price": 38}
#     ]
# result = code_already_written(100, bows)
# print(result)



from statistics import mode, median

numbers = [1, 2, 3, 4, 5, 6]
values = [
    -71,
    28,
    57,
    39,
    -45,
    17,
    -46,
    57,
    57,
    57,
    4,
    86,
    -15,
    97,
    97,
    70,
    57,
    -15,
    -46,
    74,
    29,
    74,
    57,
    60,
    39,
    -33,
    70,
    60,
    2,
    70,
    39,
    37,
    70,
    86,
    -40,
    2,
    101,
    20,
    57,
    -46,
    -30,
    70,
    2,
    2,
    85,
    29,
    86,
    -15,
    -66,
    2,
    101,
    86,
    -40,
    4,
    97,
    -79,
    -45,
    4,
    75,
    -66,
    -40,
    5,
    2,
    85,
    51,
    2,
    97,
    7,
    -46,
    97,
    70,
    -46,
    -45,
    20,
    7,
    -33,
    -46,
    -84,
    70,
    -40,
    75,
    74,
    28,
    75,
    39,
    10,
    86,
    37,
    29,
    39,
    7,
    2,
    75,
    10,
    5,
    -68,
    0,
    17,
    93,
    39,
    85,
    -71,
    57,
    -71,
    29,
    85,
    2,
    -33,
    -46,
    75,
    -15,
    -15,
    75,
    93,
    -84,
    28,
    2,
    -46,
    -15,
    0,
    -68,
    70,
    29,
    29,
    75,
    2,
    2,
    2,
    74,
    -79,
    57,
    -45,
    75,
    57,
    -15,
    85,
    -46,
    75,
    85,
    -84,
    74,
    86,
    -46,
    -84,
    4,
    86,
    92,
    -40,
    2,
    -30,
    28,
    57,
    39,
    57,
    86,
    75,
    70,
    29,
    39,
    70,
    74,
    -79,
    70,
    2,
    75,
    39,
    29,
    29,
    70,
    60,
    29,
    17,
    -40,
    97,
    97,
    97,
    29,
    57,
    73,
    60,
    -30,
    2,
    51,
    10,
    -15,
    39,
    51,
    -68,
    70,
    39,
    39,
    -45,
    4,
    -40,
    2,
    -71,
    2,
    39,
    86,
    -30,
    57,
    4,
    20,
    51,
    86,
    4,
    86,
    5,
    70,
    70,
    -33,
    -33,
    57,
    86,
    -46,
    10,
    2,
    7,
    -40,
    -17,
    -46,
    20,
    39,
    -33,
    85,
    -84,
    -40,
    39,
    75,
    2,
    -15,
    -17,
    2,
    -45,
    93,
    57,
    57,
    7,
    51,
    5,
    -33,
    37,
    70,
    -84,
    -40,
    85,
    70,
    74,
    2,
    10,
    -33,
    20,
    92,
    75,
    85,
    20,
    70,
    97,
    -33,
    -71,
    85,
    -71,
    29,
    51,
    75,
    -68,
    75,
    7,
    51,
    -15,
    29,
    74,
    75,
    -46,
    0,
    2,
    7,
    73,
    17,
    97,
    57,
    7,
    5,
    -33,
    51,
    29,
    2,
    86,
    17,
    92,
    -84,
    -40,
    -66,
    -40,
    -68,
    75,
    92,
    86,
    2,
    86,
    5,
    51,
    7,
    39,
    -33,
    75,
    -84,
    51,
    86,
    70,
    -40,
    -15,
    -17,
    -46,
    85,
    -15,
    97,
    4,
    57,
    -46,
    -84,
    -30,
    0,
    20,
    86,
    51,
    0,
    -33,
    -40,
    37,
    -40,
    75,
    -46,
    92,
    -46,
    7,
    86,
    86,
    29,
    39,
    57,
    -33,
    85,
    39,
    57,
    -71,
    2,
    -40,
    7,
    2,
    2,
    -40,
    20,
    2,
    -46,
    101,
    2,
    28,
    39,
    -66,
    29,
    93,
    57,
    20,
    29,
    -40,
    4,
    29,
    57,
    39,
    -71,
    97,
    74,
    7,
    -40,
    5,
    86,
    5,
    7,
    29,
    -46,
    5,
    86,
    2,
    -71,
    -30,
    -71,
    29,
    -45,
    -68,
    39,
    5,
    -71,
    4,
    -30,
    75,
    70,
    101,
    2,
    86,
    85,
    86,
    2,
    57,
    29,
    -46,
    -15,
    97,
    -46,
    2,
    74,
    -45,
    -46,
    -66,
    -71,
    37,
    60,
    4,
    -33,
    57,
    -15,
    -33,
    86,
    2,
    74,
    -68,
    -40,
    29,
    93,
    60,
    20,
    92,
    75,
    20,
    -68,
    -33,
    51,
    86,
    57,
    -68,
    74,
    -84,
    -40,
    74,
    86,
    -33,
    -46,
    86,
    -46,
    75,
    -15,
    -68,
    -84,
    85,
    5,
    75,
    -15,
    -33,
    7,
    20,
    5,
    -71,
    75,
    85,
    28,
    86,
    -84,
    75,
    29,
    -79,
    7,
    -46,
    -33,
    2,
    -15,
    -84,
    37,
    60,
    70,
    -46,
    51,
    -71,
    75,
    -40,
    5,
    58,
    93,
    -33,
    -15,
    86,
    86,
    -46,
    -45,
    39,
    86,
    4,
    -33,
    -84,
    60,
    60,
    75,
    2,
    37,
    2,
    -46,
    97,
    -46,
    -15,
    -15,
    17,
    -17,
    39,
    4,
    51,
    29,
    -46,
    85,
    7,
    2,
    7,
    -45,
    10,
    2,
    70,
    7,
    29,
    -71,
    97,
    74,
    2,
    12,
    2,
    -71,
    -33,
    70,
    -33,
    -84,
    86,
    74,
    2,
    -33,
    29,
    17,
    60,
    2,
    -17,
    -33,
    5,
    17,
    -46,
    2,
    -33,
    17,
    -15,
    4,
    17,
    -33,
    70,
    57,
    -17,
    75,
    97,
    2,
    -17,
    29,
    7,
    -15,
    -40,
    -33,
    -15,
    -71,
    74,
    101,
    4,
    -33,
    -84,
    2,
    -45,
    28,
    97,
    97,
    86,
    -15,
    7,
    57,
    29,
    29,
    -15,
    -45,
    5,
    58,
    2,
    75,
    86,
    -17,
    10,
    39,
    57,
    75,
    39,
    86,
    2,
    4,
    -15,
    4,
    97,
    101,
    10,
    -33,
    92,
    97,
    60,
    4,
    7,
    -15,
    5,
    -66,
    51,
    -17,
    0,
    -40,
    85,
    -15,
    92,
    29,
    -84,
    70,
    17,
    51,
    -40,
    101,
    -68,
    2,
    85,
    -33,
    74,
    75,
    2,
    -15,
    97,
    -84,
    -84,
    57,
    -46,
    70,
    86,
    39,
    17,
    86,
    -40,
    39,
    2,
    86,
    57,
    75,
    86,
    2,
    -84,
    51,
    -68,
    7,
    -33,
    39,
    20,
    20,
    29,
    -71,
    -84,
    75,
    -71,
    2,
    -15,
    2,
    -17,
    51,
    70,
    39,
    93,
    -15,
    97,
    39,
    74,
    4,
    93,
    57,
    4,
    39,
    70,
    28,
    97,
    2,
    -66,
    5,
    5,
    4,
    37,
    -46,
    74,
    2,
    5,
    -15,
    -45,
    97,
    -15,
    97,
    57,
    2,
    7,
    75,
    85,
    -33,
    -33,
    93,
    92,
    86,
    97,
    4,
    2,
    101,
    -68,
    -17,
    -17,
    29,
    5,
    20,
    -68,
    -71,
    2,
    2,
    93,
    -45,
    0,
    -33,
    73,
    2,
    -30,
    70,
    75,
    51,
    85,
    0,
    4,
    51,
    57,
    4,
    97,
    57,
    -40,
    -68,
    20,
    39,
    70,
    29,
    -33,
    2,
    2,
    57,
    -46,
    70,
    7,
    -68,
    75,
    39,
    2,
    97,
    86,
    -46,
    86,
    29,
    -84,
    51,
    -84,
    20,
    5,
    4,
    -15,
    -40,
    75,
    37,
    2,
    60,
    86,
    -84,
    57,
    57,
    85,
    2,
    39,
    70,
    -79,
    39,
    39,
    85,
    92,
    57,
    101,
    -68,
    20,
    2,
    92,
    5,
    29,
    29,
    -15,
    -46,
    -30,
    29,
    -30,
    39,
    75,
    -15,
    97,
    7,
    57,
    -66,
    2,
    -46,
    39,
    -84,
    70,
    39,
    5,
    -17,
    29,
    57,
    2,
    -33,
    86,
    2,
    0,
    39,
    60,
    -15,
    -15,
    57,
    -68,
    -15,
    -68,
    29,
    7,
    10,
    -15,
    -15,
    -46,
    86,
    70,
    75,
    -33,
    2,
    2,
    -46,
    74,
    39,
    5,
    17,
    29,
    -66,
    97,
    85,
    -40,
    2,
    2,
    4,
    97,
    97,
    -46,
    92,
    -15,
    2,
    37,
    86,
    2,
    58,
    58,
    -33,
    97,
    2,
    10,
    39,
    74,
    20,
    4,
    74,
    58,
    -40,
    -71,
    -40,
    -33,
    97,
    39,
    29,
    -45,
    85,
    2,
    74,
    51,
    29,
    -45,
    57,
    -33,
    57,
    -68,
    51,
    29,
    -84,
    20,
    57,
    -68,
    20,
    86,
    58,
    -84,
    85,
    29,
    -46,
    39,
    2,
    5,
    -15,
    92,
    70,
    97,
    10,
    58,
    2,
    2,
    4,
    70,
    93,
    20,
    -45,
    -17,
    -84,
    75,
    60,
    37,
    7,
    -17,
    86,
    57,
    2,
    7,
    74,
    4,
    -71,
    4,
    57,
    20,
    85,
    74,
    29,
    -46,
    -30,
    -46,
    74,
    -40,
    -33,
    -17,
    57,
    -33,
    -46,
    4,
    57,
    10,
    2,
    20,
    70,
    39,
    -46,
    -33,
    -46,
    4,
    -40,
    93,
    -40,
    29,
    39,
    -79,
    -17,
    -33,
    29,
    57,
    4,
    51,
    -33,
    -68,
    70,
    97,
    4,
    37,
    7,
    5,
    -71,
    2,
    -15,
    86,
    85,
    39,
    -33,
    -71,
    29
]
median_value = median(values)
mode_value = mode(values)

print(median_value)
print(mode_value)
